// Generated from D:/dev/com-interactive-map\search.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\u0014z\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003",
    "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007",
    "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r",
    "\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0005\u0010U\n\u0010\u0003\u0010\u0006\u0010X\n\u0010\r\u0010\u000e",
    "\u0010Y\u0003\u0010\u0003\u0010\u0006\u0010^\n\u0010\r\u0010\u000e\u0010",
    "_\u0005\u0010b\n\u0010\u0003\u0011\u0003\u0011\u0007\u0011f\n\u0011",
    "\f\u0011\u000e\u0011i\u000b\u0011\u0003\u0012\u0003\u0012\u0007\u0012",
    "m\n\u0012\f\u0012\u000e\u0012p\u000b\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0006\u0013u\n\u0013\r\u0013\u000e\u0013v\u0003\u0013\u0003\u0013",
    "\u0003n\u0002\u0014\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b",
    "\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b",
    "\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\u0003\u0002\u0006",
    "\u0003\u00022;\u0005\u0002C\\aac|\u0006\u00022;C\\aac|\u0005\u0002\u000b",
    "\f\u000e\u000f\"\"\u0002\u0080\u0002\u0003\u0003\u0002\u0002\u0002\u0002",
    "\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002",
    "\t\u0003\u0002\u0002\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002",
    "\r\u0003\u0002\u0002\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002",
    "\u0011\u0003\u0002\u0002\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002",
    "\u0015\u0003\u0002\u0002\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002",
    "\u0019\u0003\u0002\u0002\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002",
    "\u001d\u0003\u0002\u0002\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002",
    "!\u0003\u0002\u0002\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003",
    "\u0002\u0002\u0002\u0003\'\u0003\u0002\u0002\u0002\u0005*\u0003\u0002",
    "\u0002\u0002\u0007.\u0003\u0002\u0002\u0002\t1\u0003\u0002\u0002\u0002",
    "\u000b5\u0003\u0002\u0002\u0002\r:\u0003\u0002\u0002\u0002\u000f@\u0003",
    "\u0002\u0002\u0002\u0011B\u0003\u0002\u0002\u0002\u0013E\u0003\u0002",
    "\u0002\u0002\u0015G\u0003\u0002\u0002\u0002\u0017J\u0003\u0002\u0002",
    "\u0002\u0019L\u0003\u0002\u0002\u0002\u001bO\u0003\u0002\u0002\u0002",
    "\u001dQ\u0003\u0002\u0002\u0002\u001fT\u0003\u0002\u0002\u0002!c\u0003",
    "\u0002\u0002\u0002#j\u0003\u0002\u0002\u0002%t\u0003\u0002\u0002\u0002",
    "\'(\u0007k\u0002\u0002()\u0007p\u0002\u0002)\u0004\u0003\u0002\u0002",
    "\u0002*+\u0007c\u0002\u0002+,\u0007p\u0002\u0002,-\u0007f\u0002\u0002",
    "-\u0006\u0003\u0002\u0002\u0002./\u0007q\u0002\u0002/0\u0007t\u0002",
    "\u00020\b\u0003\u0002\u0002\u000212\u0007p\u0002\u000223\u0007q\u0002",
    "\u000234\u0007v\u0002\u00024\n\u0003\u0002\u0002\u000256\u0007v\u0002",
    "\u000267\u0007t\u0002\u000278\u0007w\u0002\u000289\u0007g\u0002\u0002",
    "9\f\u0003\u0002\u0002\u0002:;\u0007h\u0002\u0002;<\u0007c\u0002\u0002",
    "<=\u0007n\u0002\u0002=>\u0007u\u0002\u0002>?\u0007g\u0002\u0002?\u000e",
    "\u0003\u0002\u0002\u0002@A\u0007@\u0002\u0002A\u0010\u0003\u0002\u0002",
    "\u0002BC\u0007@\u0002\u0002CD\u0007?\u0002\u0002D\u0012\u0003\u0002",
    "\u0002\u0002EF\u0007>\u0002\u0002F\u0014\u0003\u0002\u0002\u0002GH\u0007",
    ">\u0002\u0002HI\u0007?\u0002\u0002I\u0016\u0003\u0002\u0002\u0002JK",
    "\u0007?\u0002\u0002K\u0018\u0003\u0002\u0002\u0002LM\u0007#\u0002\u0002",
    "MN\u0007?\u0002\u0002N\u001a\u0003\u0002\u0002\u0002OP\u0007*\u0002",
    "\u0002P\u001c\u0003\u0002\u0002\u0002QR\u0007+\u0002\u0002R\u001e\u0003",
    "\u0002\u0002\u0002SU\u0007/\u0002\u0002TS\u0003\u0002\u0002\u0002TU",
    "\u0003\u0002\u0002\u0002UW\u0003\u0002\u0002\u0002VX\t\u0002\u0002\u0002",
    "WV\u0003\u0002\u0002\u0002XY\u0003\u0002\u0002\u0002YW\u0003\u0002\u0002",
    "\u0002YZ\u0003\u0002\u0002\u0002Za\u0003\u0002\u0002\u0002[]\u00070",
    "\u0002\u0002\\^\t\u0002\u0002\u0002]\\\u0003\u0002\u0002\u0002^_\u0003",
    "\u0002\u0002\u0002_]\u0003\u0002\u0002\u0002_`\u0003\u0002\u0002\u0002",
    "`b\u0003\u0002\u0002\u0002a[\u0003\u0002\u0002\u0002ab\u0003\u0002\u0002",
    "\u0002b \u0003\u0002\u0002\u0002cg\t\u0003\u0002\u0002df\t\u0004\u0002",
    "\u0002ed\u0003\u0002\u0002\u0002fi\u0003\u0002\u0002\u0002ge\u0003\u0002",
    "\u0002\u0002gh\u0003\u0002\u0002\u0002h\"\u0003\u0002\u0002\u0002ig",
    "\u0003\u0002\u0002\u0002jn\u0007$\u0002\u0002km\u000b\u0002\u0002\u0002",
    "lk\u0003\u0002\u0002\u0002mp\u0003\u0002\u0002\u0002no\u0003\u0002\u0002",
    "\u0002nl\u0003\u0002\u0002\u0002oq\u0003\u0002\u0002\u0002pn\u0003\u0002",
    "\u0002\u0002qr\u0007$\u0002\u0002r$\u0003\u0002\u0002\u0002su\t\u0005",
    "\u0002\u0002ts\u0003\u0002\u0002\u0002uv\u0003\u0002\u0002\u0002vt\u0003",
    "\u0002\u0002\u0002vw\u0003\u0002\u0002\u0002wx\u0003\u0002\u0002\u0002",
    "xy\b\u0013\u0002\u0002y&\u0003\u0002\u0002\u0002\n\u0002TY_agnv\u0003",
    "\u0002\u0003\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class searchLexer extends antlr4.Lexer {

    static grammarFileName = "search.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'in'", "'and'", "'or'", "'not'", "'true'", 
                         "'false'", "'>'", "'>='", "'<'", "'<='", "'='", 
                         "'!='", "'('", "')'" ];
	static symbolicNames = [ null, "IN", "AND", "OR", "NOT", "TRUE", "FALSE", 
                          "GT", "GE", "LT", "LE", "EQ", "NEQ", "LPAREN", 
                          "RPAREN", "DECIMAL", "IDENTIFIER", "STRING", "WS" ];
	static ruleNames = [ "IN", "AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", 
                      "LT", "LE", "EQ", "NEQ", "LPAREN", "RPAREN", "DECIMAL", 
                      "IDENTIFIER", "STRING", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

searchLexer.EOF = antlr4.Token.EOF;
searchLexer.IN = 1;
searchLexer.AND = 2;
searchLexer.OR = 3;
searchLexer.NOT = 4;
searchLexer.TRUE = 5;
searchLexer.FALSE = 6;
searchLexer.GT = 7;
searchLexer.GE = 8;
searchLexer.LT = 9;
searchLexer.LE = 10;
searchLexer.EQ = 11;
searchLexer.NEQ = 12;
searchLexer.LPAREN = 13;
searchLexer.RPAREN = 14;
searchLexer.DECIMAL = 15;
searchLexer.IDENTIFIER = 16;
searchLexer.STRING = 17;
searchLexer.WS = 18;



